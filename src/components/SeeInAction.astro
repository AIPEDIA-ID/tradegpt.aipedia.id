---
const galleryImages = [
  {
    src: "https://flowbite.s3.amazonaws.com/docs/gallery/square/image-1.jpg",
    alt: "TradeGPT Demo 1"
  },
  {
    src: "https://flowbite.s3.amazonaws.com/docs/gallery/square/image-2.jpg",
    alt: "TradeGPT Demo 2"
  },
  {
    src: "https://flowbite.s3.amazonaws.com/docs/gallery/square/image-3.jpg",
    alt: "TradeGPT Demo 3"
  },
  {
    src: "https://flowbite.s3.amazonaws.com/docs/gallery/square/image-4.jpg",
    alt: "TradeGPT Demo 4"
  },
  {
    src: "https://flowbite.s3.amazonaws.com/docs/gallery/square/image-5.jpg",
    alt: "TradeGPT Demo 5"
  },
  {
    src: "https://flowbite.s3.amazonaws.com/docs/gallery/square/image-6.jpg",
    alt: "TradeGPT Demo 6"
  }
];

// Styles yang digunakan berulang
const styles = {
  galleryItem: "gallery-item cursor-pointer overflow-hidden rounded-lg",
  galleryImage: "w-full h-48 object-cover transition-all duration-300 hover:scale-105",
  carouselButton: "absolute top-1/2 -translate-y-1/2 bg-orange-500/70 hover:bg-orange-500 text-white rounded-full p-2 focus:outline-none"
};

// Teks konten
const content = {
  title: "See It In Action",
  brandName: "TradeGPT",
  subtitle: "Real conversation with TradeGPT Trading Assistant"
};
---

<section id="features" class="py-16 px-6 relative">
  <!-- Background -->
  <div>
    <!-- GPT Chat Mockup -->
    <div class="max-w-3xl mx-auto">
      <div class="text-center mb-8">
        <h2 class="text-3xl md:text-4xl font-bold mb-4">
            {content.title}
            <span class="bg-gradient-to-r from-orange-400 to-orange-600 bg-clip-text text-transparent">
                {content.brandName}
            </span>
        </h2>
        <p class="text-lg text-gray-400 max-w-2xl mx-auto">
            {content.subtitle}
        </p>
      </div>
      
      <!-- Image Gallery Grid -->
      <div class="grid grid-cols-2 md:grid-cols-3 gap-4 mb-8">
        {galleryImages.map((image) => (
          <div class={styles.galleryItem}>
            <img 
              src={image.src} 
              alt={image.alt} 
              class={styles.galleryImage}
            />
          </div>
        ))}
      </div>
      
      <!-- Lightbox Modal -->
      <div id="lightbox-modal" class="fixed inset-0 z-50 hidden bg-black/90 flex items-center justify-center">
        <div class="relative w-full max-w-4xl px-4">
          <!-- Close Button -->
          <button id="close-lightbox" class="absolute top-2 right-6 text-white z-50 bg-black/50 hover:bg-black/80 rounded-full w-8 h-8 flex items-center justify-center transition-colors">
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" stroke-width="2">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
          
          <!-- Carousel Container -->
          <div id="lightbox-carousel" class="relative">
            <!-- Carousel Items -->
            <div id="carousel-items" class="relative overflow-hidden rounded-lg">
              <!-- Images will be dynamically added here -->
            </div>
            
            <!-- Carousel Controls -->
            <button id="prev-slide" class={`${styles.carouselButton} left-2`}>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 19l-7-7 7-7" />
              </svg>
            </button>
            <button id="next-slide" class={`${styles.carouselButton} right-2`}>
              <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
              </svg>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>

<script is:inline>
  document.addEventListener('DOMContentLoaded', () => {
    const galleryItems = document.querySelectorAll('.gallery-item');
    const lightboxModal = document.getElementById('lightbox-modal');
    const carouselItems = document.getElementById('carousel-items');
    const closeButton = document.getElementById('close-lightbox');
    const prevButton = document.getElementById('prev-slide');
    const nextButton = document.getElementById('next-slide');
    
    let currentIndex = 0;
    const images = [];
    
    // Collect all images from gallery
    galleryItems.forEach((item, index) => {
      const img = item.querySelector('img');
      images.push({
        src: img.src,
        alt: img.alt
      });
      
      // Add click event to open lightbox
      item.addEventListener('click', () => {
        openLightbox(index);
      });
    });
    
    // Function to open lightbox
    function openLightbox(index) {
      currentIndex = index;
      updateCarousel();
      lightboxModal.classList.remove('hidden');
      document.body.classList.add('overflow-hidden');
    }
    
    // Function to close lightbox
    function closeLightbox() {
      lightboxModal.classList.add('hidden');
      document.body.classList.remove('overflow-hidden');
    }
    
    // Function to update carousel
    function updateCarousel() {
      carouselItems.innerHTML = '';
      
      // Create image element
      const imgElement = document.createElement('img');
      imgElement.src = images[currentIndex].src;
      imgElement.alt = images[currentIndex].alt;
      imgElement.className = 'w-full h-auto max-h-[80vh] object-contain';
      
      carouselItems.appendChild(imgElement);
    }
    
    // Event listeners
    closeButton.addEventListener('click', closeLightbox);
    
    // Close when clicking outside the image
    lightboxModal.addEventListener('click', (e) => {
      if (e.target === lightboxModal) {
        closeLightbox();
      }
    });
    
    // Previous slide
    prevButton.addEventListener('click', () => {
      currentIndex = (currentIndex - 1 + images.length) % images.length;
      updateCarousel();
    });
    
    // Next slide
    nextButton.addEventListener('click', () => {
      currentIndex = (currentIndex + 1) % images.length;
      updateCarousel();
    });
    
    // Keyboard navigation
    document.addEventListener('keydown', (e) => {
      if (!lightboxModal.classList.contains('hidden')) {
        if (e.key === 'Escape') {
          closeLightbox();
        } else if (e.key === 'ArrowLeft') {
          currentIndex = (currentIndex - 1 + images.length) % images.length;
          updateCarousel();
        } else if (e.key === 'ArrowRight') {
          currentIndex = (currentIndex + 1) % images.length;
          updateCarousel();
        }
      }
    });
  });
</script>
